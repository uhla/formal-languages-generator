
#this defines how generated examples are print into the output text areas
#you can change this sections values(right side after `=`) if you know how. It is very simple script language. 

#IMPORTANT: DO NOT CHANGE KEYS(left side before =) IN SECTION AFTER THIS! THE PROGRAM WILL NOT RUN CORRECTLY IF YOU CHANGE THEM!
plain.setstart.printout =  `ln +\
                            ln(div c = 90 0()) +\
                            ln(introduction.part1 + gram in u) +\
                            ln(introduction.part2 + gram out u) +\
                            ln(div l = 90 0()) +\
                            ln()`

plain.assignment.printout =`ln(div l * 90 0()) +\
                            ln(div l * 90 0(example + " " + number + ".")) +\
                            ln +\
                            ln(div c - 90 2(input)) +\
                            ln(sp 2 + given + gram in + " ({" + print as N + "}, {" + print as T + "}, P, " + print as S + ")" + where + " P = {") +\
                            ln(print as P 4 + " }.") +\
                            ln(sp 2 + istrans + gram out + ".") +\
                            ln(div c - 90 2()) +\
                            ln`

plain.afterassign.printout=`div c - 90 2(result) + ln`

plain.step.printout =      `sp 2 + sub + after + alg_st + tobe + ln +\
                            sp 2 + "({" + print st N + "}, {" + print st T + "}, P, " + print st S + ")" + where + " P = {" + ln +\
                            print st P 4 + " }." + ln +\
                            sp 2 + ordp +\
                            ln`

plain.result.printout =    `sp 2 + resulting1 + gram out + tobe  +\
                            " ({" + print re N + "}, {" + print re T + "}, P, " + print re S + ")" + where + " P = {" + ln +\
                            print re P 4 + " }." + ln +\
                            sp 2 + ordp +\
                            ln + div l - 90 2() + ln +\
                            ln +\`

plain.between.printout =   ``

plain.setend.printout =    ``




latex.setstart.printout =  `"%%" + ln +\
                            "%%" + ln(div c = 80 0()) +\
                            "%%" + ln(introduction.part1 + gram in) +\
                            "%%" + ln(introduction.part2 + gram out) +\
                            "%%" + ln(div l = 80 0()) +\
                            "%%" + ln + ln +\
                            "\\documentclass[" + "czech" + "]{article}" + ln +\
                            "\\usepackage[T1]{fontenc}" + ln +\
                            "\\usepackage[utf8]{inputenc}" + ln + ln +\
                            "\\usepackage{babel}" + ln + ln +\
                            "\\begin{document}" + ln + ln`

latex.assignment.printout =`"%%" + div c - 88 0(example + number) + ln +\
                            rp "\u03b5" "\\$ \\\\varepsilon \\$" (\
                            "\\noindent" + ln +\
                            "\\textbf{" + example + " " + number + ". " + "}" +\
                            given + gram in + " $(\\{" + print as N + "\\},\\{" + print as T + "\\},P," + print as S + ")$" + where + ln +\
                            "\\[" + ln +\
                            "\\setlength{\\arraycolsep}{3pt}" + ln +\
                            "\\begin{array}{rlll}" + ln +\
                            "P=\\{ & " + rp "\u03b5" "\\\\varepsilon" (rp "\\n" "\\\\\\\\ $0& "(rp " \\| " "\\\\mid "\
                            (rp " \u2192 " " & \\\\rightarrow & "(print as P)))) + " ~~\\}." + ln +\
                            "\\end{array}" + ln +\
                            "\\]" + ln +\
                            istrans + gram out + "." + "\\\\" + ln + ln)`

latex.afterassign.printout=`ln + "\\noindent" + ln +\
                            "\\textbf{" + result + " " + number + ". " + "}"`

latex.step.printout =      `rp "\u03b5" "\\$ \\\\varepsilon \\$" (\
                            sub + after + alg_st + tobe + " " + \
                            " $(\\{" + print st N + "\\},\\{" + print st T + "\\},P," + print st S + ")$" + where + ln +\
                            "\\[" + ln +\
                            "\\begin{array}{rlll}" + ln +\
                            "P=\\{ & " + rp "\u03b5" "\\\\varepsilon" (rp "\\n" "\\\\\\\\ $0& "(rp " \\| " "\\\\mid "\
                            (rp " \u2192 " " & \\\\rightarrow & "(print st P)))) + " ~~\\}." + ln +\
                            "\\end{array}" + ln +\
                            "\\]" + ordl + ln)`

latex.result.printout =    `rp "\u03b5" "\\$ \\\\varepsilon \\$" (\
                            resulting1 + gram out + tobe +\
                            " $(\\{" + print re N + "\\},\\{" + print re T + "\\},P," + print re S + ")$" + where + ln +\
                            "\\[" + ln +\
                            "\\begin{array}{rlll}" + ln +\
                            "P=\\{ & " + rp "\u03b5" "\\\\varepsilon" (rp "\\n" "\\\\\\\\ $0& "(rp " \\| " "\\\\mid "\
                            (rp " \u2192 " " & \\\\rightarrow & "(print re P)))) + " ~~\\}." + ln +\
                            "\\end{array}" + ln +\
                            "\\]" + ordl + ln + ln + ln)`

latex.between.printout =   `"\\hrule" + ln +\
                            "\\bigskip"`

latex.setend.printout =    `"\\end{document}"`




is.setstart.printout =     ``

is.assignment.printout =   `is1 + number + is2 + number + is3 + gram in + " " + \
                            "<M>(\\{" + print as N + "\\},\\{" + print as T + "\\},P," + print as S + ")</M>" + where + " <br>" + ln +\
                            "<M>P=\\{\\begin{array}[t]{l} " + rp "\u03b5" "\\\\varepsilon" (rp "\\n" ",\\\\\\\\ $0"(rp " \\| " "\\\\mid "\
                            (rp " \u2192 " " \\\\to "(print as P)))) + "\\}. \\end{array}</M>" + ln +\
                            "</p>" + ln +\
                            "<p>" + istrans + gram out + ".</p>" + ln +\
                            is5 + number + is6 + number + is7 + number + is8 + ln +\
                            is9 + "CFG-" + gram outjs + ":" + rp "\u03b5" "\\\\e" (rp "\\n" ", "(rp " \\| " "\\|"\
                            (rp " \u2192 " "->"(print as P)))) + is10 + ln + ln`

is.afterassign.printout=   ``

is.step.printout =         ``

is.result.printout =       ``


is.between.printout =      `"--" + ln() + ln()`

is.setend.printout =       ``

#feel free to define new named variables in this section. You can also change values or keys of the current ones.
#if you define new key it should be always defined in 2 versions: language1.name.of.new.key and language2.name.of.new.key
#otherwise program will throw error
#also be aware that if you delete some of keys that are still referred in section above program will throw error
language1.introduction.part1 = `Nov\u00e1 sada p\u0159\u00edklad\u016f. Vstupn\u00ed forma: `
language1.introduction.part2 = `                    V\u00fdstupn\u00ed forma: `
language1.example = `P\u0159\u00edklad`
language1.input = `Zadán\u00ed`
language1.result = `\u0158e\u0161en\u00ed`
language1.lang = `czech`
language1.istrans = `P\u0159eve\u010fte ji na `
language1.trans = ` p\u0159eve\u010fte na `
language1.resulting1 = `V\u00fdsledn\u00e1 `
language1.tobe = ` je`
language1.where = `, kde`
language1.sub = `\u010c\u00e1ste\u010dn\u00fd v\u00fdsledek`
language1.after = ` po aplikaci `
language1.given = `Je zad\u00e1na `
language1.giv = `Zadanou `
language1.order = `Po\u010d\u00e1te\u010dn\u00ed uspo\u0159\u00e1dan\u00ed netermin\u00e1l\u016f v algoritmu na odstran\u011bn\u00ed lev\u00e9 rekurze bylo `

language2.introduction.part1 = `New example set. Input form: `
language2.introduction.part2 = `                 Output form: `
language2.example = `Example`
language2.input = `Assignment`
language2.result = `Solution`
language2.lang = `english`
language2.istrans = `Transform it to `
language2.trans = ` transform to `
language2.resulting1 = `The resulting `
language2.tobe = ` is`
language2.where =  ` where`
language2.sub = `Subresult`
language2.after = ` after application of `
language2.given = `It is given `
language2.giv = `Given `
language2.order = `The initial nonterminal ordering in left recursion elimination algorithm was `

language1.is1 = `<input name="example-`
language2.is1 = `<input name="example-`
language1.is2 = `" type="hidden" value="example-`
language2.is2 = `" type="hidden" value="example-`
language1.is3 = `"/><noscript>(Pro spravn\u00e9 fungovan\u00ed odpov\u011bdn\u00edku si zapnete JavaScript)</noscript><script \
                src="https://is.muni.cz/auth/www/255493/cfgparser.js" type="text/javascript"></script><script \
                src="https://is.muni.cz/auth/www/172451/utilIS.js" type="text/javascript"></script><style type="text/css">@import \
                "https://is.muni.cz/auth/www/172451/parser_style.css";</style><p>Je zad\u00e1na `
language2.is3 =`"/><noscript>(In order to display site correctly please turn on javascript)</noscript><script \
                src="https://is.muni.cz/auth/www/255493/cfgparser.js" type="text/javascript"></script><script \
                src="https://is.muni.cz/auth/www/172451/utilIS.js" type="text/javascript"></script><style type="text/css">@import \
                "https://is.muni.cz/auth/www/172451/parser_style.css";</style><p>It is given `
language1.is4 =`, kde <br>`
language2.is4 =` where <br>`
language1.is5 = `<div id="example-`
language2.is5 = `<div id="example-`
language1.is6 = `-div" class="parser_text_default"> :e___________________________________________________________________________\
                ________________________________________________________ <br><span id="exmple-`
language2.is6 = `-div" class="parser_text_default"> :e___________________________________________________________________________\
                ________________________________________________________ <br><span id="exmple-`
language1.is7 = `-error" class="parser_error"></span></div><script type="text/javascript">register("example-`
language2.is7 = `-error" class="parser_error"></span></div><script type="text/javascript">register("example-`
language1.is8= `", Parser.parse)</script>`
language2.is8= `", Parser.parse)</script>`
language1.is9= `:e="b:`
language2.is9= `:e="b:`
language1.is10= `" ok`
language2.is10= `" ok`
#IMPORTANT! DO NOT CHANGE KEY STRINGS (on the left side before `=`) IN THE FOLLOWING SECTION OF FILE!
#you can change values (right side) but keys are programmatically referenced
#THE PROGRAM WILL NOT RUN CORRECTLY IF YOU CHANGE THE KEYS
js.NO_NONGENERATING = `NE1`
js.NO_UNREACHABLE = `NE2`
js.NO_USELESS = `RED`
js.NO_EPSILON = `EPS`
js.NO_EPSILON_NO_USELESS = ``
js.NO_SIMPLE = `SRF`
js.PROPER = `PRO`
js.NO_LEFT_RECURSION = `RLR`
js.CNF = `CNF`
js.GNF = `GNF`
js.RED_NO_LEFT_RECURSION = `RLR`
js.RED_CNF = `CNF`
js.RED_GNF = `GNF`


language1.grammar.GENERAL = `obecn\u00e1 CFG`
language1.grammar.NO_NONGENERATING = `CFG bez nenormovan\u00fdch symbol\u016f`
language1.grammar.NO_UNREACHABLE = `CFG bez nedosa\u017eiteln\u00fdch symbol\u016f`
language1.grammar.NO_USELESS = `CFG bez nepou\u017eiteln\u00fdch symbol\u016f`
language1.grammar.WITHOUT_EPSILON = `CFG bez \u03b5-pravidel`
language1.grammar.NO_EPSILON_NO_USELESS = `CFG bez nepou\u017eiteln\u00fdch sym. a \u03b5-pravidel`
language1.grammar.PROPER = `vlastn\u00ed CFG`
language1.grammar.PROPER_NO_SIMPLE = `vlastn\u00ed CFG bez jednoduch\u00fdch pravidel`
language1.grammar.PROPER_NO_LEFT_REC= `vlastn\u00ed CFG bez lev\u00e9 rekurze`
language1.grammar.NO_EPSILON = `CFG bez \u03b5-pravidel`
language1.grammar.NO_SIMPLE = `CFG bez jednoduch\u00fdch pravidel`
language1.grammar.NO_LEFT_RECURSION = `CFG bez lev\u00e9 rekurze`
language1.grammar.CNF = `CFG v CNF`
language1.grammar.GNF = `CFG v GNF`
language1.grammar.CFG = `CFG`
language1.grammar.NOT_CYCLIC_NO_EPSILON = `necyklick\u00e1 CFG bez \u03b5-pravidel`
language1.grammar.READY_FOR_GNF_ALG = `CFG bez \u03b5-pravidel a lev\u00e9 rekurze`
language1.grammar.NO_EPSILON_NO_SIMPLE = `CFG bez jednoduch\u00fdch a \u03b5-pravidel`
language1.grammar.RED_NO_LEFT_RECURSION = `redukovan\u00e1 CFG bez lev\u00e9 rekurze`
language1.grammar.RED_CNF = `redukovan\u00e1 CFG v CNF`
language1.grammar.RED_GNF = `redukovan\u00e1 CFG v GNF`

language2.grammar.GENERAL = `general CFG`
language2.grammar.NO_NONGENERATING = `CFG without nongenerating symbols`
language2.grammar.NO_UNREACHABLE = `CFG without unreachable symbols`
language2.grammar.NO_USELESS = `CFG without useless symbols`
language2.grammar.WITHOUT_EPSILON = `CFG without \u03b5-productions`
language2.grammar.NO_EPSILON_NO_USELESS = `CFG without useless sym. and \u03b5-productions`
language2.grammar.PROPER = `proper CFG`
language2.grammar.PROPER_NO_SIMPLE = `proper CFG without unit productions`
language2.grammar.PROPER_NO_LEFT_REC = `Proper CFG without L-recursion`
language2.grammar.NO_EPSILON = `CFG without \u03b5-productions`
language2.grammar.NO_SIMPLE = `CFG without unit productions`
language2.grammar.NO_LEFT_RECURSION = `CFG without left recursion`
language2.grammar.CNF = `CFG in CNF`
language2.grammar.GNF = `CFG in GNF`
language2.grammar.CFG = `CFG`
language2.grammar.NOT_CYCLIC_NO_EPSILON = `not cyclic CFG without \u03b5-productions`
language2.grammar.READY_FOR_GNF_ALG = `CFG without \u03b5-productions and left recursion`
language2.grammar.NO_EPSILON_NO_SIMPLE = `CFG without unit productions and \u03b5-productions`
language2.grammar.RED_NO_LEFT_RECURSION = `reduced CFG without left recursion`
language2.grammar.RED_CNF = `reduced CFG in CNF`
language2.grammar.RED_GNF = `reduced CFG in GNF`

language1.algorithm.NONGENERATING_ELIM_ALG = `algoritmu na eliminaci nenormovan\u00fdch symbol\u016f`
language1.algorithm.UNREACHABLE_ELIM_ALG = `algoritmu na eliminaci nedosa\u017eiteln\u00fdch symbol\u016f`
language1.algorithm.EPSILON_ELIM_ALG = `algoritmu na eliminaci \u03b5-pravidel`
language1.algorithm.SIMPLE_RULES_ELIM_ALG = `algoritmu na eliminaci jednoduch\u00fdch pravidel`
language1.algorithm.LRECURSION_ELIM_ALG = `algoritmu na odstran\u011bn\u00ed lev\u00e9 rekurze`
language1.algorithm.CNF_CREATION_ALG = `algoritmu transformace do CNF`
language1.algorithm.GNF_CREATION_ALG = `algoritmu transformace do GNF`

language2.algorithm.NONGENERATING_ELIM_ALG = `the nongenerating symbols elimination algorithm`
language2.algorithm.UNREACHABLE_ELIM_ALG = `the unreachable symbols elimination algorithm`
language2.algorithm.EPSILON_ELIM_ALG = `the \u03b5-productions elimination algorithm`
language2.algorithm.SIMPLE_RULES_ELIM_ALG = `the unit productions elimination algorithm`
language2.algorithm.LRECURSION_ELIM_ALG = `the left recursion elimination algorithm`
language2.algorithm.CNF_CREATION_ALG = `the CNF creation algorithm`
language2.algorithm.GNF_CREATION_ALG = `the GNF creation algorithm`

#END OF SECTION WHERE YOU SHOULD NOT CHANGE KEYS